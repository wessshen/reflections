What happens when you initialize a repository? Why do you need to do it?
You create an empty repository with no files tracked, but tracking files is needed to create commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area works as a place where you can keep track of files that will be tracked in the next commit, while working directory is simply a place that contains all the files that can possibly be tracked and the repository is the space where all the commits made are stored.

How can you use the staging area to make sure you have one commit per logical change?
You can compare the changes made between the working directory and the staging area, which by default is the most recent commit made, with the command git diff, and you can also make sure by running the command git diff --staged to compare the staging area with the most recent commit made if any changes were made after it.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
It allows the user to add labels to a group of commits and/or work on many features at the same time.

How do the diagrams help you visualize the branch structure?
It helped to show which commits are reachable and which are not. Also, it showed how a repository can contain many branches, despite all of the branches is part of the project.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The commits from both branches will be merged together, or more specifically, the branch not checked out will be merged to the one currently checkedout. The process is represented through a tree to show which branch label gets updated and possibly the order of the commits.

